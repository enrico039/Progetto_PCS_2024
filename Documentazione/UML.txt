@startuml
package Polygons <<Folder>>{

class Fractures{
+ FracturesNumber: unsigned int
+ CoordVertices: vector<vector<Vector3d>>
+ FracturesId: vector<unsigned int> 
+ NumVertices: map<unsigned int, list<unsigned int>> 
+ Spheres: vector<Vector4d> 
+ Normals: vector<Vector3d>

..Non member functions..
+ bool importdfn(const string& filename, Fractures& fractures)
+ list<vector<unsigned int>> checkspheres(const Fractures& fractures)

..FRACTURES TEST..
CorrectNumberOfFractures
CorrectFractures
}

class Traces{
+ TracesNumber: unsigned int
+ TracesExtremesCoord: vector<array<Vector3d, 2>> 
+ TracesId: vector<unsigned int>
+ TracesFracturesId: vector<array<unsigned int, 2>> 
+ TraceLengths: vector<double>
+ TipsTrue: vector<array<unsigned int, 2>>  
+ TipsFalse: vector<array<unsigned int, 2>> 

..Non member functions..
void tracesfinder(const unsigned int& epsilon, const Fractures& fractures, const list<vector<unsigned int>>& goodcouples, Traces& traces, const double& epsilon)


}
}

package Gedim <<Frame>>{
}
note "Gedim is an external library" as GedimN
GedimN..Gedim

Gedim ..> Fractures::gedimInterface 

Traces "1"--> "2" Fractures : is generated by

package Analytics <<Folder>>{
class Analytics_Functions{
+ Vector4d calcsphere(const vector<Vector3d>& vertex_data)
+ double distance(const Vector3d& point1, const Vector3d& point2)
+ Vector3d normal(const vector<Vector3d>& vertex_data)
+ bool intersectrettaretta(const unsigned int& epsilon, const Vector3d& point, const Vector3d& dir, const Vector3d& point1, const Vector3d& dir1, Vector3d& inter)                    
+ bool intersectrettasemiretta(const unsigned int& epsilon, const Vector3d& point, const Vector3d& dir, const Vector3d& point1, const Vector3d& dir1, Vector3d& control)
+ double calcolangolo(const Vector3d& v1, const Vector3d& v2, const Vector3d& normal)
+ void antiorario(vector<Vector3d>& sottopol, const Vector3d& normal)

..ANALYTICS TEST..
BasicSpheres
3DSpheres
BasicDistance
3DDistance
Normals
RettaRettaIntersAlBordo
RettaRettaInters
RettaRettaInters3D
RettaRettaNoInters
RettaRettaIntersFuori
RettaSemirettaIntersAlBordo
RettaSemirettaInters
RettaSemirettaNoInters
RettaSemirettaIntersFuori
RettaSemirettatNegativo
Angolo_xy
Angolo_xz
Angolo_yz
Angolo3D
BasicAntiorario
}
Analytics_Functions ..> Fractures
Analytics_Functions ..> PolygonalMesh                             
}

package MeshLibrary <<Folder>>{
class PolygonalMesh{
+ unsigned int NumberCell0d; // Numero di celle 0d
+ IdCell0d: vector<unsigned int> 
+ CoordCell0d: vector<Vector3d> 
+ NumberCell1d: unsigned int
+ IdCell1d: vector<unsigned int>
+ IdVerticesCell1d: vector<vector<unsigned int>>
+ NumberCell2d: unsigned int
+ IdCell2d: vector<unsigned int>
+ IdVerticesCell2d: vector<vector<unsigned int>>
+ IdEdgesCell2d: vector<vector<unsigned int>> 

..Non member functions..
bool meshcalc(const double& epsilon, const Traces& traces, const Fractures& fractures, vector<PolygonalMesh>& mesh)
}
}
Fractures "1"--> "1" PolygonalMesh :is cut by Traces into



package OutputFileTools <<Folder>>{
class OutputFileTools_Functions{
+ bool printtraces(const string& tracesfileout, const Traces& traces)
+ bool printtips(const string& tipsfileout, Traces& traces, const Fractures& fractures)
}
}
OutputFileTools_Functions..> Traces

package Export <<Folder>>{
class Export_Functions{
+ void exportMesh(const vector<PolygonalMesh>& mesh, const unsigned int& exportingFracture)
}
}
Export_Functions ..> Gedim
@enduml
